{"version":3,"sources":["../index.js"],"names":["app","use","set","process","env","PORT","get","request","response","send","req","res","json","id","firstName","lastName","email","then","data","promises","fromJS","take","map","push","news","all","console","log","results","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,qBAAR;;AAEAD,IAAIE,GAAJ,CAAQ,MAAR,EAAgBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAApC;;AAEAL,IAAIM,GAAJ,CAAQ,GAAR,EAAa,UAASC,OAAT,EAAkBC,QAAlB,EAA4B;AACvCA,WAASC,IAAT,CAAc,cAAd;AACD,CAFD;;AAIAT,IAAIM,GAAJ,CAAQ,QAAR,EAAkB,UAASI,GAAT,EAAcC,GAAd,EAAmB;AACnC;AACAA,MAAIC,IAAJ,CAAS,CACP,EAAEC,IAAI,CAAN,EAASC,WAAW,KAApB,EAA2BC,UAAU,OAArC,EAA8CC,OAAO,eAArD,EADO,EAEP;AACEH,QAAI,CADN;AAEEC,eAAW,OAFb;AAGEC,cAAU,QAHZ;AAIEC,WAAO;AAJT,GAFO,EAQP;AACEH,QAAI,CADN;AAEEC,eAAW,MAFb;AAGEC,cAAU,KAHZ;AAIEC,WAAO;AAJT,GARO,CAAT;AAeD,CAjBD;;AAmBAhB,IAAIM,GAAJ,CAAQ,YAAR,EAAsB,UAASI,GAAT,EAAcC,GAAd,EAAmB;AACvC;AACA,2BAAM,sEAAN,EACCM,IADD,CACM;AAAA,WAAYT,SAASI,IAAT,EAAZ;AAAA,GADN,EAECK,IAFD,CAEM;AAAA,WAAQN,IAAIC,IAAJ,CAASM,IAAT,CAAR;AAAA,GAFN;AAGD,CALD;;AAOAlB,IAAIM,GAAJ,CAAQ,mBAAR,EAA6B,UAASI,GAAT,EAAcC,GAAd,EAAmB;AAC9C;AACA,kBACCL,GADD,CACK,sEADL,EAECW,IAFD,CAEM,oBAAY;AAChB,QAAME,WAAW,EAAjB;AACF,wBAAUC,MAAV,CAAiBZ,SAASU,IAA1B,EAAgCG,IAAhC,CAAqC,CAArC,EAAwCC,GAAxC,CAA4C,gBAAQ;AAClDH,eAASI,IAAT,CACA,gBAAMjB,GAAN,iDACgDkB,IADhD,wBADA;AAKH,KANC;;AAQA,WAAO,gBAAMC,GAAN,CAAUN,QAAV,EAAoBF,IAApB,CAAyB;AAAA,aAAWS,QAAQC,GAAR,CAAY,SAAZ,EAAuBhB,IAAIC,IAAJ,CAAS,iBAAEU,GAAF,CAAMM,OAAN,EAAe,MAAf,CAAT,CAAvB,CAAX;AAAA,KAAzB,CAAP;AACD,GAbC;AAcD,CAhBD;;AAkBA5B,IAAI6B,MAAJ,CAAW7B,IAAIM,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAW;AACrCoB,UAAQC,GAAR,CAAY,sCAAsC3B,IAAIM,GAAJ,CAAQ,MAAR,CAAlD;AACD,CAFD","file":"index.js","sourcesContent":["import cors from 'cors';\nimport express from 'express';\nimport fetch from 'node-fetch';\nimport Immutable from 'immutable';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nconst app = express();\napp.use(cors());\n\napp.set('port', process.env.PORT || 5000);\n\napp.get('/', function(request, response) {\n  response.send('Hello World!');\n});\n\napp.get('/users', function(req, res) {\n  // Hard coding for simplicity. Pretend this hits a real database\n  res.json([\n    { id: 1, firstName: 'Bob', lastName: 'Smith', email: 'bob@gmail.com' },\n    {\n      id: 2,\n      firstName: 'Tammy',\n      lastName: 'Norton',\n      email: 'tnorton@yahoo.com',\n    },\n    {\n      id: 3,\n      firstName: 'Tina',\n      lastName: 'Lee',\n      email: 'lee.tina@hotmail.com',\n    },\n  ]);\n});\n\napp.get('/hackernew', function(req, res) {\n  // Hard coding for simplicity. Pretend this hits a real database\n  fetch('https://hacker-news.firebaseio.com///v0/newstories.json?print=pretty')\n  .then(response => response.json())\n  .then(data => res.json(data));\n});\n\napp.get('/hackernewslatest', function(req, res) {\n  // Hard coding for simplicity. Pretend this hits a real database\n  axios\n  .get('https://hacker-news.firebaseio.com///v0/newstories.json?print=pretty')\n  .then(response => {\n    const promises = [];\n  Immutable.fromJS(response.data).take(2).map(news => {\n    promises.push(\n    axios.get(\n      `https://hacker-news.firebaseio.com/v0/item/${news}.json?print=pretty`,\n    ),\n  );\n});\n  \n  return axios.all(promises).then(results => console.log('RESULT ', res.json(_.map(results, 'data'))));\n});\n});\n\napp.listen(app.get('port'), function() {\n  console.log('Node app is running at localhost:' + app.get('port'));\n});\n"]}